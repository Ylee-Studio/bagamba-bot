#!/usr/bin/env python3
"""
Redis Worker –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import sys
import time
import json
import logging
import signal
from datetime import datetime, timedelta
from typing import Optional
import redis
from dataclasses import dataclass
from config import Config
from slack_sdk import WebClient
from database import Database
from redis_scheduler import RedisClient

from duty_manager import DutyManager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

logger = logging.getLogger(__name__)


@dataclass
class NotificationSender:
    worker_client: WebClient
    duty_manager: DutyManager

    def __call__(self, incident_data: dict, notification_type: str):
        try:
            ticket_key = incident_data["ticket_key"]
            channel_id = incident_data["channel_id"]
            thread_ts = incident_data["thread_ts"]
            author_id = incident_data["author_id"]

            logger.info(
                f"üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {ticket_key} (—Ç–∏–ø: {notification_type})"
            )

            if notification_type == "default":
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–º—É –æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º duty_manager –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

                current_duty = self.duty_manager.get_current_duty_person()
                if current_duty:
                    message = f"<@{current_duty.slack_id}> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑—å–º–∏—Ç–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ —Ä–∞–±–æ—Ç—É"
                    self.worker_client.chat_postMessage(
                        channel=channel_id, thread_ts=thread_ts, text=message
                    )
                    logger.info(
                        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–º—É {current_duty.name} –¥–ª—è {ticket_key}"
                    )
                else:
                    logger.warning(f"‚ö†Ô∏è –î–µ–∂—É—Ä–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {ticket_key}")

            elif notification_type == "awaiting_response":
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –æ —Ç–æ–º, —á—Ç–æ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
                message = "üßò –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"
                self.worker_client.chat_postMessage(
                    channel=channel_id,
                    thread_ts=thread_ts,
                    text=f"<@{author_id}> {message}",
                )
                logger.info(
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É {author_id} –¥–ª—è {ticket_key}"
                )

            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_type}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ worker'–∞: {e}")


@dataclass
class NotificationWorker:
    """Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Redis"""

    redis_client: redis.Redis
    db: Database
    send_notification_sync_from_worker: NotificationSender
    notification_queue = "notifications:queue"
    notification_prefix = "notification:"
    running: bool = True

    def __post_init__(self):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.running = False

    def _get_incident_status(self, ticket_key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            incident = self.db.get_incident(ticket_key)
            if incident:
                return incident.status.value
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {ticket_key}: {e}")
            return None

    def _send_notification(self, incident_data: dict, notification_type: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Slack"""
        try:
            self.send_notification_sync_from_worker(incident_data, notification_type)
            logger.info(
                f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {incident_data['ticket_key']} (—Ç–∏–ø: {notification_type})"
            )

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {incident_data.get('ticket_key', 'unknown')}: {e}"
            )

    def _process_notification(self, notification_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            ticket_key = notification_data["ticket_key"]
            incident_data = notification_data["incident_data"]
            notification_type = notification_data["notification_type"]

            logger.info(
                f"üîî –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {ticket_key} (—Ç–∏–ø: {notification_type})"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            current_status = self._get_incident_status(ticket_key)
            if not current_status:
                logger.warning(
                    f"‚ö†Ô∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç {ticket_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if current_status.upper() == "CLOSED":
                logger.info(f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç {ticket_key} –∑–∞–∫—Ä—ã—Ç, –æ—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                self._cancel_notification(ticket_key, notification_type)
                return

            if current_status.upper() == "FROZEN":
                logger.info(f"‚ùÑÔ∏è –ò–Ω—Ü–∏–¥–µ–Ω—Ç {ticket_key} –∑–∞–º–æ—Ä–æ–∂–µ–Ω, –æ—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                self._cancel_notification(ticket_key, notification_type)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
            incident_data["status"] = current_status

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self._send_notification(incident_data, notification_type)

            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
            if current_status.upper() in ["CREATED", "AWAITING_RESPONSE"]:
                self._schedule_next_notification(notification_data)
            else:
                logger.info(
                    f"üõë –ò–Ω—Ü–∏–¥–µ–Ω—Ç {ticket_key} –≤ —Å—Ç–∞—Ç—É—Å–µ {current_status}, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                )
                self._cancel_notification(ticket_key, notification_type)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def _schedule_next_notification(self, notification_data: dict):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            next_time = datetime.now() + timedelta(
                minutes=notification_data["interval_minutes"]
            )
            notification_data["scheduled_time"] = next_time.isoformat()
            notification_data["created_at"] = datetime.now().isoformat()

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            self.redis_client.lpush(
                self.notification_queue, json.dumps(notification_data)
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á
            notification_key = f"{self.notification_prefix}{notification_data['ticket_key']}:{notification_data['notification_type']}"
            self.redis_client.set(
                notification_key, json.dumps(notification_data), ex=86400
            )

            logger.info(
                f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {notification_data['ticket_key']} –Ω–∞ {next_time}"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def _cancel_notification(self, ticket_key: str, notification_type: str):
        """–û—Ç–º–µ–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            notification_key = (
                f"{self.notification_prefix}{ticket_key}:{notification_type}"
            )
            self.redis_client.delete(notification_key)

            # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
            self._remove_from_queue(ticket_key, notification_type)

            logger.info(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {ticket_key}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {ticket_key}: {e}")

    def _remove_from_queue(self, ticket_key: str, notification_type: str):
        """–£–¥–∞–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            queue_items = self.redis_client.lrange(self.notification_queue, 0, -1)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –æ—Ç–º–µ–Ω—è–µ–º–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
            filtered_items = []
            removed_count = 0

            for item in queue_items:
                try:
                    notification_data = json.loads(item)
                    if (
                        notification_data.get("ticket_key") == ticket_key
                        and notification_data.get("notification_type")
                        == notification_type
                    ):
                        removed_count += 1
                        logger.info(
                            f"üóëÔ∏è Worker —É–¥–∞–ª–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {ticket_key}:{notification_type}"
                        )
                    else:
                        filtered_items.append(item)
                except json.JSONDecodeError:
                    # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ
                    filtered_items.append(item)

            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if removed_count > 0:
                self.redis_client.delete(self.notification_queue)
                if filtered_items:
                    self.redis_client.lpush(self.notification_queue, *filtered_items)
                logger.info(
                    f"‚úÖ Worker —É–¥–∞–ª–∏–ª {removed_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è {ticket_key}:{notification_type}"
                )

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ {ticket_key}:{notification_type}: {e}"
            )

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª worker'–∞"""
        logger.info("üöÄ NotificationWorker –∑–∞–ø—É—â–µ–Ω")

        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º)
                result = self.redis_client.brpop(self.notification_queue, timeout=5)

                if result:
                    # result[0] - –∏–º—è –æ—á–µ—Ä–µ–¥–∏, result[1] - –¥–∞–Ω–Ω—ã–µ
                    notification_json = result[1].decode("utf-8")
                    notification_data = json.loads(notification_json)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    scheduled_time = datetime.fromisoformat(
                        notification_data["scheduled_time"]
                    )
                    current_time = datetime.now()

                    if current_time >= scheduled_time:
                        # –í—Ä–µ–º—è –ø—Ä–∏—à–ª–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        self._process_notification(notification_data)
                    else:
                        # –í—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                        self.redis_client.lpush(
                            self.notification_queue, notification_json
                        )
                        # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        wait_seconds = (scheduled_time - current_time).total_seconds()
                        if wait_seconds > 0:
                            time.sleep(min(wait_seconds, 60))  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
                else:
                    # –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏, –∂–¥–µ–º
                    time.sleep(1)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ worker'–∞: {e}")
                time.sleep(10)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ

        logger.info("üõë NotificationWorker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º Redis –∫–ª–∏–µ–Ω—Ç
        redis_client = redis.Redis.from_url(Config.REDIS_URL, db=Config.REDIS_DB)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        try:
            redis_client.ping()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except redis.ConnectionError as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
            logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: " + Config.REDIS_URL)
            sys.exit(1)
        
        worker = NotificationWorker(
            redis_client=redis_client,
            send_notification_sync_from_worker=NotificationSender(
                duty_manager=DutyManager(
                    google_sheets_url=Config.GOOGLE_SHEET_URL,
                    credentials_path=Config.GOOGLE_CREDENTIALS_PATH,
                    sheet_range=Config.GOOGLE_SHEET_RANGE,
                ),
                worker_client=WebClient(token=Config.SLACK_BOT_TOKEN),
            ),
            db=Database(),
        )
        worker.run()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
