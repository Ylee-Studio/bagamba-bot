import logging
import os
from datetime import datetime, timedelta
from typing import Any, Optional, List
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dataclasses import dataclass, field
import re


logger = logging.getLogger(__name__)


@dataclass
class DutySlot:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–ª–æ—Ç–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞"""

    start_time: str  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "07:00"
    end_time: str    # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "12:00"
    name: str        # –ò–º—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ
    slack_id: str    # Slack ID –¥–µ–∂—É—Ä–Ω–æ–≥–æ


@dataclass
class DutyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–∂—É—Ä–Ω—ã—Ö"""

    google_sheets_url: str
    credentials_path: str
    sheet_range: str = "A:D"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–ª–æ–Ω–∫–∏ A-D
    service: Any | None = None
    duty_slots: list[DutySlot] = field(default_factory=list)
    last_update: datetime | None = datetime.now() - timedelta(days=2)
    sheet_id: str | None = None
    update_interval_days: int = 2

    def __post_init__(
        self,
    ):
        self._extract_sheet_id()
        self.init()

    def _extract_sheet_id(
        self,
    ) -> None:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ URL Google Sheets"""

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ URL
        # –ü—Ä–∏–º–µ—Ä—ã URL:
        # https://docs.google.com/spreadsheets/d/1ABC123/edit#gid=0
        # https://docs.google.com/spreadsheets/d/1ABC123/edit?gid=0#gid=0

        # –ò—â–µ–º ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ URL
        match = re.search(r"/spreadsheets/d/([a-zA-Z0-9-_]+)", self.google_sheets_url)
        if not match:
            logger.error(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ URL: {self.google_sheets_url}"
            )
            return None

        self.sheet_id = match.group(1)
        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω ID —Ç–∞–±–ª–∏—Ü—ã: {self.sheet_id}")

    def _init_google_sheets_service(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Google Sheets API —Å–µ—Ä–≤–∏—Å"""
        if not self.credentials_path:
            logger.error(
                "‚ùå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (GOOGLE_CREDENTIALS_PATH)"
            )
            return False

        if not os.path.exists(self.credentials_path):
            logger.error(f"‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_path}")
            return False

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            credentials = service_account.Credentials.from_service_account_file(
                self.credentials_path,
                scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"],
            )

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
            self.service = build("sheets", "v4", credentials=credentials)
            logger.info("‚úÖ Google Sheets API —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets API: {e}")
            return False

    def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–µ–∂—É—Ä–Ω—ã—Ö"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–µ–∂—É—Ä–Ω—ã—Ö...")
        if self._init_google_sheets_service():
            logger.info("‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
            self.update_duty_schedule()
            logger.info(
                f"üìä –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏: {len(self.duty_slots)} –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
            )
        else:
            logger.warning(
                "‚ö†Ô∏è Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–∏—Å—Ç–µ–º–∞ –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å"
            )
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–µ–∂—É—Ä–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def update_duty_schedule(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö –∏–∑ Google Sheets"""
        if not self.service or not self.sheet_id:
            logger.error(
                "‚ùå Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return

        logger.info(
            f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö –∏–∑ Google Sheets (ID: {self.sheet_id})"
        )

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞: {self.sheet_range}")
            result = (
                self.service.spreadsheets()
                .values()
                .get(spreadsheetId=self.sheet_id, range=self.sheet_range)
                .execute()
            )

            values = result.get("values", [])

            if not values:
                logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
            self._parse_sheet_data(values)
            self.last_update = datetime.now()
            logger.info(
                f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.duty_slots)} –∑–∞–ø–∏—Å–µ–π"
            )

        except HttpError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets API: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö: {e}")

    def _parse_sheet_data(self, values: List[List[str]]):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"""
        self.duty_slots = []

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
        for row in values[1:]:
            if len(row) < 4:
                continue

            try:
                start_time = row[0].strip()
                end_time = row[1].strip()
                name = row[2].strip()
                slack_id = row[3].strip()

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å #N/A –≤ slack_id
                if slack_id == "#N/A" or not slack_id or slack_id.lower() == "n/a":
                    logger.debug(
                        f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è {name} ({start_time}-{end_time}) –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ Slack ID."
                    )
                    continue

                # –£–¥–∞–ª—è–µ–º @ –∏–∑ Slack ID, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if slack_id.startswith("@"):
                    slack_id = slack_id[1:]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                if not self._validate_time_format(start_time) or not self._validate_time_format(end_time):
                    logger.warning(
                        f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {name}: {start_time} - {end_time}"
                    )
                    continue

                duty_slot = DutySlot(
                    start_time=start_time,
                    end_time=end_time,
                    name=name,
                    slack_id=slack_id,
                )

                self.duty_slots.append(duty_slot)
                logger.debug(
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–ª–æ—Ç: {name} ({slack_id}) —Å {start_time} –ø–æ {end_time}"
                )

            except (ValueError, IndexError) as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {row} - {e}")
                continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        self.duty_slots.sort(key=lambda x: x.start_time)
        logger.info(f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.duty_slots)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")

    def _validate_time_format(self, time_str: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM"""
        try:
            datetime.strptime(time_str, "%H:%M")
            return True
        except ValueError:
            return False

    def _parse_date(self, date_str: str) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        if not date_str:
            return None

        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        date_str = date_str.strip()

        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç
        date_formats = [
            "%d.%m.%Y",  # 16.09.2025
            "%d/%m/%Y",  # 16/09/2025
            "%Y-%m-%d",  # 2025-09-16
            "%d-%m-%Y",  # 16-09-2025
            "%d.%m.%y",  # 16.09.25
            "%d/%m/%y",  # 16/09/25
        ]

        for fmt in date_formats:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue

        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {date_str}")
        return None

    def get_current_duty_person(self) -> Optional[DutySlot]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        logger.info(
            f"üîç get_current_duty_person –≤—ã–∑–≤–∞–Ω. last_update: {self.last_update}, update_interval: {self.update_interval_days}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        if self.last_update is None or datetime.now() - self.last_update > timedelta(
            days=self.update_interval_days
        ):
            logger.info("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö...")
            self.update_duty_schedule()
        else:
            logger.info("üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö")

        current_time = datetime.now().strftime("%H:%M")
        logger.info(f"üìÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
        logger.info(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {len(self.duty_slots)}")

        for duty_slot in self.duty_slots:
            logger.info(
                f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç: {duty_slot.name} ({duty_slot.start_time} - {duty_slot.end_time})"
            )
            if duty_slot.start_time <= current_time <= duty_slot.end_time:
                logger.info(
                    f"‚úÖ –¢–µ–∫—É—â–∏–π –¥–µ–∂—É—Ä–Ω—ã–π –Ω–∞–π–¥–µ–Ω: {duty_slot.name} ({duty_slot.slack_id})"
                )
                return duty_slot

        logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –¥–µ–∂—É—Ä–Ω—ã–π –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
        return None

    def get_duty_schedule_info(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–µ–∂—É—Ä–Ω—ã—Ö"""
        if not self.duty_slots:
            return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

        info = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.last_update.strftime('%d.%m.%Y %H:%M') if self.last_update else '–Ω–∏–∫–æ–≥–¥–∞'}):\n"

        for duty_slot in self.duty_slots:
            info += f"‚Ä¢ {duty_slot.start_time}-{duty_slot.end_time}: {duty_slot.name} ({duty_slot.slack_id})\n"

        return info
