import logging
import json
from datetime import datetime, timedelta
import redis
from dataclasses import dataclass, field

logger = logging.getLogger(__name__)


@dataclass
class RedisClient(redis.Redis):
    url: str
    db: int
    client: redis.Redis = field(init=False)

    def __post_init__(self):
        super().__init__(
            **redis.Redis.from_url(
                self.url, db=self.db
            ).connection_pool.connection_kwargs
        )


@dataclass
class RedisNotificationScheduler:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Redis"""

    redis_client: redis.Redis
    notification_queue: str = "notifications:queue"
    notification_prefix: str = "notification:"

    def schedule_notification(
        self,
        ticket_key: str,
        incident_data: dict,
        interval_minutes: int,
        notification_type: str = "default",
    ):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Redis queue"""
        try:
            notification_key = (
                f"{self.notification_prefix}{ticket_key}:{notification_type}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
            if self.redis_client.exists(notification_key):
                logger.warning(
                    f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {ticket_key}:{notification_type} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ"
                )
                self.cancel_notification(ticket_key, notification_type)

            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            scheduled_time = datetime.now() + timedelta(minutes=interval_minutes)

            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_data = {
                "ticket_key": ticket_key,
                "incident_data": incident_data,
                "notification_type": notification_type,
                "interval_minutes": interval_minutes,
                "scheduled_time": scheduled_time.isoformat(),
                "created_at": datetime.now().isoformat(),
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.redis_client.lpush(
                self.notification_queue, json.dumps(notification_data)
            )

            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            self.redis_client.set(
                notification_key, json.dumps(notification_data), ex=86400
            )  # TTL 24 —á–∞—Å–∞

            logger.info(
                f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {ticket_key} —á–µ—Ä–µ–∑ {interval_minutes} –º–∏–Ω—É—Ç (–≤—Ä–µ–º—è: {scheduled_time})"
            )

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {ticket_key}: {e}"
            )

    def cancel_notification(self, ticket_key: str, notification_type: str = "default"):
        """–û—Ç–º–µ–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            notification_key = (
                f"{self.notification_prefix}{ticket_key}:{notification_type}"
            )

            # –£–¥–∞–ª—è–µ–º –∏–∑ Redis
            deleted_count = self.redis_client.delete(notification_key)

            # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
            self._remove_from_queue(ticket_key, notification_type)

            if deleted_count > 0:
                logger.info(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {ticket_key}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {ticket_key}: {e}")

    def _remove_from_queue(self, ticket_key: str, notification_type: str):
        """–£–¥–∞–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            queue_items = self.redis_client.lrange(self.notification_queue, 0, -1)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –æ—Ç–º–µ–Ω—è–µ–º–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
            filtered_items = []
            removed_count = 0

            for item in queue_items:
                try:
                    notification_data = json.loads(item)
                    if (
                        notification_data.get("ticket_key") == ticket_key
                        and notification_data.get("notification_type")
                        == notification_type
                    ):
                        removed_count += 1
                        logger.info(
                            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {ticket_key}:{notification_type}"
                        )
                    else:
                        filtered_items.append(item)
                except json.JSONDecodeError:
                    # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ
                    filtered_items.append(item)

            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if removed_count > 0:
                self.redis_client.delete(self.notification_queue)
                if filtered_items:
                    self.redis_client.lpush(self.notification_queue, *filtered_items)
                logger.info(
                    f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è {ticket_key}:{notification_type}"
                )

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ {ticket_key}:{notification_type}: {e}"
            )

    def cancel_all_notifications(self, ticket_key: str):
        """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–∞"""
        try:
            # –ò—â–µ–º –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
            notification_pattern = f"{self.notification_prefix}{ticket_key}:*"
            notification_keys = self.redis_client.keys(notification_pattern)

            if notification_keys:
                deleted_count = self.redis_client.delete(*notification_keys)
                logger.info(
                    f"‚ùå –û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {ticket_key} ({deleted_count} –∫–ª—é—á–µ–π)"
                )

            # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
            self._remove_all_from_queue(ticket_key)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {ticket_key}: {e}")

    def _remove_all_from_queue(self, ticket_key: str):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            queue_items = self.redis_client.lrange(self.notification_queue, 0, -1)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –æ—Ç–º–µ–Ω—è–µ–º–æ–º—É —Ç–∏–∫–µ—Ç—É
            filtered_items = []
            removed_count = 0

            for item in queue_items:
                try:
                    notification_data = json.loads(item)
                    if notification_data.get("ticket_key") == ticket_key:
                        removed_count += 1
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {ticket_key}")
                    else:
                        filtered_items.append(item)
                except json.JSONDecodeError:
                    # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ
                    filtered_items.append(item)

            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if removed_count > 0:
                self.redis_client.delete(self.notification_queue)
                if filtered_items:
                    self.redis_client.lpush(self.notification_queue, *filtered_items)
                logger.info(
                    f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è {ticket_key}"
                )

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è {ticket_key}: {e}"
            )

    def get_notification_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            notification_count = len(
                self.redis_client.keys(f"{self.notification_prefix}*")
            )
            queue_length = self.redis_client.llen(self.notification_queue)

            return {
                "total_notifications": notification_count,
                "queue_length": queue_length,
                "redis_connected": self.redis_client.ping(),
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                "total_notifications": 0,
                "queue_length": 0,
                "redis_connected": False,
            }

    def restore_notifications(self, incidents):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            from database import IncidentStatus

            for incident in incidents:
                if incident.status == IncidentStatus.CREATED:
                    incident_data = {
                        "ticket_key": incident.ticket_key,
                        "channel_id": incident.channel_id,
                        "thread_ts": incident.thread_ts,
                        "author_id": incident.author_id,
                        "status": incident.status.value,
                        "assigned_to": incident.assigned_to,
                        "created_at": (
                            incident.created_at.isoformat()
                            if incident.created_at
                            else datetime.now().isoformat()
                        ),
                        "last_notification": (
                            incident.last_notification.isoformat()
                            if incident.last_notification
                            else None
                        ),
                    }

                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    self.schedule_notification(
                        incident.ticket_key, incident_data, 5, "default"
                    )
                    logger.info(
                        f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {incident.ticket_key}"
                    )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
