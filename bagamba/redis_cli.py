#!/usr/bin/env python3
"""
CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Redis —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""

import argparse
import sys
import json
from datetime import datetime
from dotenv import load_dotenv
import redis
from config import Config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


def connect_redis():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Redis"""
    try:
        client = redis.Redis.from_url(Config.REDIS_URL, db=Config.REDIS_DB)
        client.ping()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        sys.exit(1)


def clear_all_notifications():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    client = connect_redis()

    try:
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        queue_deleted = client.delete("notifications:queue")

        # –û—á–∏—â–∞–µ–º –∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_keys = client.keys("notification:*")
        keys_deleted = 0
        if notification_keys:
            keys_deleted = client.delete(*notification_keys)

        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"  - –£–¥–∞–ª–µ–Ω–æ –æ—á–µ—Ä–µ–¥–µ–π: {queue_deleted}")
        print(f"  - –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {keys_deleted}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


def clear_notifications_for_ticket(ticket_key):
    """–û—á–∏—â–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞"""
    client = connect_redis()

    try:
        # –ò—â–µ–º –∫–ª—é—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
        notification_pattern = f"notification:{ticket_key}:*"
        notification_keys = client.keys(notification_pattern)

        keys_deleted = 0
        if notification_keys:
            keys_deleted = client.delete(*notification_keys)

        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {ticket_key}:")
        print(f"  - –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–π: {keys_deleted}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {ticket_key}: {e}")


def show_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Redis"""
    client = connect_redis()

    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_count = len(client.keys("notification:*"))
        queue_length = client.llen("notifications:queue")

        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        print(f"  - –í—Å–µ–≥–æ –∫–ª—é—á–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_count}")
        print(f"  - –î–ª–∏–Ω–∞ –æ—á–µ—Ä–µ–¥–∏: {queue_length}")
        print("  - Redis –ø–æ–¥–∫–ª—é—á–µ–Ω: ‚úÖ")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if queue_length > 0:
            print("\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:")
            notifications = client.lrange("notifications:queue", 0, -1)
            for i, notification in enumerate(notifications):
                try:
                    data = json.loads(notification)
                    scheduled_time = datetime.fromisoformat(data["scheduled_time"])
                    print(
                        f"  {i + 1}. {data['ticket_key']} - {scheduled_time.strftime('%H:%M:%S')}"
                    )
                except Exception as e:
                    print(f"  {i + 1}. –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if notification_count > 0:
            print("\nüìã –ö–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
            notification_keys = client.keys("notification:*")
            for key in notification_keys[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                try:
                    data = client.get(key)
                    if data:
                        notification_data = json.loads(data)
                        scheduled_time = datetime.fromisoformat(
                            notification_data["scheduled_time"]
                        )
                        print(
                            f"  - {key.decode('utf-8')} - {scheduled_time.strftime('%H:%M:%S')}"
                        )
                except Exception as e:
                    print(f"  - {key.decode('utf-8')} - –û—à–∏–±–∫–∞: {e}")

            if len(notification_keys) > 10:
                print(f"  ... –∏ –µ—â–µ {len(notification_keys) - 10} –∫–ª—é—á–µ–π")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


def show_notification_details(ticket_key):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–∞"""
    client = connect_redis()

    try:
        # –ò—â–µ–º –∫–ª—é—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
        notification_pattern = f"notification:{ticket_key}:*"
        notification_keys = client.keys(notification_pattern)

        if not notification_keys:
            print(f"‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {ticket_key} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        print(f"üìã –î–µ—Ç–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {ticket_key}:")

        for key in notification_keys:
            try:
                data = client.get(key)
                if data:
                    notification_data = json.loads(data)
                    scheduled_time = datetime.fromisoformat(
                        notification_data["scheduled_time"]
                    )
                    created_at = datetime.fromisoformat(notification_data["created_at"])

                    print(f"\n  –ö–ª—é—á: {key.decode('utf-8')}")
                    print(f"  –¢–∏–ø: {notification_data['notification_type']}")
                    print(
                        f"  –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {scheduled_time.strftime('%Y-%m-%d %H:%M:%S')}"
                    )
                    print(f"  –°–æ–∑–¥–∞–Ω–æ: {created_at.strftime('%Y-%m-%d %H:%M:%S')}")
                    print(f"  –ò–Ω—Ç–µ—Ä–≤–∞–ª: {notification_data['interval_minutes']} –º–∏–Ω—É—Ç")

            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {key.decode('utf-8')}: {e}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è {ticket_key}: {e}")


def test_redis_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
    try:
        client = connect_redis()
        info = client.info()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
        print(f"  - –í–µ—Ä—Å–∏—è Redis: {info.get('redis_version', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"  - –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {info.get('used_memory_human', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(
            f"  - –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {info.get('connected_clients', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        )

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Redis —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python redis_cli.py stats                    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  python redis_cli.py clear                    # –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  python redis_cli.py clear BACK-123           # –û—á–∏—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è BACK-123
  python redis_cli.py details BACK-123         # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è BACK-123
  python redis_cli.py test                     # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        """,
    )

    parser.add_argument(
        "command",
        choices=["stats", "clear", "details", "test"],
        help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    )

    parser.add_argument(
        "ticket_key", nargs="?", help="–ö–ª—é—á —Ç–∏–∫–µ—Ç–∞ (–¥–ª—è –∫–æ–º–∞–Ω–¥ clear –∏ details)"
    )

    args = parser.parse_args()

    if args.command == "stats":
        show_stats()
    elif args.command == "clear":
        if args.ticket_key:
            clear_notifications_for_ticket(args.ticket_key)
        else:
            clear_all_notifications()
    elif args.command == "details":
        if not args.ticket_key:
            print("‚ùå –î–ª—è –∫–æ–º–∞–Ω–¥—ã 'details' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ticket_key")
            sys.exit(1)
        show_notification_details(args.ticket_key)
    elif args.command == "test":
        test_redis_connection()


if __name__ == "__main__":
    main()
