import logging
from dataclasses import dataclass, field
from slack_sdk import WebClient
from database import IncidentStatus
from duty_manager import DutyManager
from incident_manager import IncidentManager

logger = logging.getLogger(__name__)


@dataclass
class PermissionsChecker:
    allowed_channels: list = field(default_factory=list)
    allowed_button_users: list = field(default_factory=list)

    def is_user_allowed_for_buttons(self, user_id: str) -> bool:
        logger.info(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üîê ALLOWED_BUTTON_USERS: {self.allowed_button_users}")
        logger.info(f"üîê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.allowed_button_users)}")

        if not len(self.allowed_button_users):
            logger.info(
                f"üîê –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç–æ–π, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è {user_id}"
            )
            return True

        is_allowed = user_id in self.allowed_button_users
        logger.info(
            f"üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {'—Ä–∞–∑—Ä–µ—à–µ–Ω' if is_allowed else '–∑–∞–ø—Ä–µ—â–µ–Ω'}"
        )
        return is_allowed

    def is_channel_allowed(self, channel_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        logger.info(f"üîê ALLOWED_CHANNELS: {self.allowed_channels}")
        logger.info(f"üîê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(self.allowed_channels)}")
        
        if not len(self.allowed_channels):
            logger.info("üîê –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–æ–π, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø")
            return True
        is_allowed = channel_id in self.allowed_channels
        logger.info(f"üîê –ö–∞–Ω–∞–ª {channel_id} {'—Ä–∞–∑—Ä–µ—à–µ–Ω' if is_allowed else '–∑–∞–ø—Ä–µ—â–µ–Ω'}")
        return is_allowed


@dataclass
class Bot:
    slack_client: WebClient
    permissions_checker: PermissionsChecker
    duty_manager: DutyManager
    incident_manager: IncidentManager
    default_responsible_user_id: str
    bot_id: str = "B09F0M5V5T9"

    def get_duty_manager(
        self,
    ) -> str:
        duty_slot = self.duty_manager.get_current_duty_person()
        logger.info(
            f"üîç –í create_incident_buttons –ø–æ–ª—É—á–µ–Ω –¥–µ–∂—É—Ä–Ω—ã–π: {duty_slot.name if duty_slot else 'None'} ({duty_slot.slack_id if duty_slot else 'None'})"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–∂—É—Ä–Ω–æ–≥–æ, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        duty_user_id = (
            duty_slot.slack_id if duty_slot else self.default_responsible_user_id
        )
        duty_name = duty_slot.name if duty_slot else "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"
        logger.info(
            f"üîç –í create_incident_buttons –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {duty_name} ({duty_user_id})"
        )
        return duty_user_id

    def is_bot_message(self, event) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞"""
        return event.get("bot_id") is not None or event.get("subtype") == "bot_message"

    def get_user_name(self, user_id: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        try:
            response = self.slack_client.users_info(user=user_id)
            return response["user"]["real_name"] or response["user"]["name"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"<@{user_id}>"

    def get_user_email(self, user_id: str) -> str | None:
        """–ü–æ–ª—É—á–∞–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        try:
            response = self.slack_client.users_info(user=user_id)
            return response["user"]["profile"]["email"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None

    def add_reaction(self, channel_id: str, message_ts: str, emoji: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"""
        try:
            self.slack_client.reactions_add(
                channel=channel_id, timestamp=message_ts, name=emoji
            )
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è {emoji} –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_ts}")
            return True
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏ {emoji} –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_ts}: {e}"
            )
            return False

    def remove_reaction(self, channel_id: str, message_ts: str, emoji: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é —Å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            self.slack_client.reactions_remove(
                channel=channel_id, timestamp=message_ts, name=emoji
            )
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è {emoji} —Å —Å–æ–æ–±—â–µ–Ω–∏—è {message_ts}")
            return True
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏ {emoji} —Å —Å–æ–æ–±—â–µ–Ω–∏—è {message_ts}: {e}"
            )
            return False

    def find_and_update_control_message(
        self, channel_id: str, thread_ts: str, blocks: list, ticket_key: str
    ):
        try:
            response = self.slack_client.conversations_replies(
                channel=channel_id, ts=thread_ts
            )
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            bot_messages = []
            for message in response["messages"]:
                if (
                    message.get("bot_id") == self.bot_id
                    and message.get("blocks")
                    and any(
                        block.get("type") == "actions"
                        for block in message.get("blocks", [])
                    )
                ):
                    bot_messages.append(message)

            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            if bot_messages:
                message_to_update = bot_messages[-1]
                self.slack_client.chat_update(
                    channel=channel_id, ts=message_to_update["ts"], blocks=blocks
                )
                logger.info(
                    f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {ticket_key}"
                )
                return True
            else:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {ticket_key}"
                )
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            return False

    def create_incident_buttons(self, incident, user_id=None):
        if user_id and not self.permissions_checker.is_user_allowed_for_buttons(
            user_id
        ):
            return []
        duty_user_id = self.get_duty_manager()

        if incident.status == IncidentStatus.CREATED:
            return [
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": f"<@{duty_user_id}> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑—å–º–∏—Ç–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç –≤ —Ä–∞–±–æ—Ç—É",
                    },
                },
                {
                    "type": "actions",
                    "elements": [
                        {
                            "type": "button",
                            "text": {"type": "plain_text", "text": "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"},
                            "action_id": "take_incident",
                            "value": incident.ticket_key,
                            "style": "primary",
                        }
                    ],
                },
            ]
        elif incident.status == IncidentStatus.ASSIGNED:
            return [
                {
                    "type": "actions",
                    "elements": [
                        {
                            "type": "button",
                            "text": {"type": "plain_text", "text": "–û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç"},
                            "action_id": "awaiting_response",
                            "value": incident.ticket_key,
                            "style": "primary",
                        },
                        {
                            "type": "button",
                            "text": {"type": "plain_text", "text": "–†–µ—à–µ–Ω–æ"},
                            "action_id": "close_incident",
                            "value": incident.ticket_key,
                            "style": "danger",
                        },
                        {
                            "type": "button",
                            "text": {"type": "plain_text", "text": "–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å"},
                            "action_id": "freeze_incident",
                            "value": incident.ticket_key,
                        },
                    ],
                }
            ]
        elif incident.status == IncidentStatus.AWAITING_RESPONSE:
            return [
                {
                    "type": "actions",
                    "elements": [
                        {
                            "type": "button",
                            "text": {"type": "plain_text", "text": "–†–µ—à–µ–Ω–æ"},
                            "action_id": "close_incident",
                            "value": incident.ticket_key,
                            "style": "danger",
                        },
                        {
                            "type": "button",
                            "text": {"type": "plain_text", "text": "–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å"},
                            "action_id": "freeze_incident",
                            "value": incident.ticket_key,
                        },
                    ],
                }
            ]
        elif incident.status == IncidentStatus.FROZEN:
            return [
                {
                    "type": "actions",
                    "elements": [
                        {
                            "type": "button",
                            "text": {"type": "plain_text", "text": "–û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç"},
                            "action_id": "awaiting_response",
                            "value": incident.ticket_key,
                            "style": "primary",
                        },
                        {
                            "type": "button",
                            "text": {"type": "plain_text", "text": "–†–µ—à–µ–Ω–æ"},
                            "action_id": "close_incident",
                            "value": incident.ticket_key,
                            "style": "danger",
                        },
                    ],
                }
            ]
        return []

    def handle_dm_command(self, event, say):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        user_id = event.get("user")
        text = event.get("text", "").strip().lower()
        channel_id = event.get("channel")

        logger.info(f"üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º DM –∫–æ–º–∞–Ω–¥—É: user={user_id}, text='{text}', channel={channel_id}")

        if not user_id or not text:
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id")
            return

        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ –ª–∏—á–∫—É –æ—Ç {user_id}: {text}")

        # –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö
        if text in ["–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "update schedule", "refresh"]:
            self._handle_update_schedule_command(channel_id, say)
        elif text in ["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "schedule", "–¥–µ–∂—É—Ä–Ω—ã–µ"]:
            self._handle_show_schedule_command(channel_id, say)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            self._show_available_commands(channel_id, say)

    def _handle_update_schedule_command(self, channel_id: str, say):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã—Ö")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            self.duty_manager.update_duty_schedule()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            schedule_info = self.duty_manager.get_duty_schedule_info()
            
            say(
                channel=channel_id,
                text=f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n{schedule_info}"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            say(
                channel=channel_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}"
            )

    def _handle_show_schedule_command(self, channel_id: str, say):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        try:
            schedule_info = self.duty_manager.get_duty_schedule_info()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ
            current_duty = self.duty_manager.get_current_duty_person()
            if current_duty:
                current_info = f"\nüïê –°–µ–π—á–∞—Å –¥–µ–∂—É—Ä–Ω—ã–π: {current_duty.name} ({current_duty.start_time}-{current_duty.end_time})"
            else:
                current_info = "\nüïê –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ"
            
            say(
                channel=channel_id,
                text=f"{schedule_info}{current_info}"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            say(
                channel=channel_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}"
            )

    def _show_available_commands(self, channel_id: str, say):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        commands_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

‚Ä¢ `–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ` - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö
‚Ä¢ `—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ` - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö
‚Ä¢ `help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ.
        """
        
        say(channel=channel_id, text=commands_text)

    def handle_thread_message(self, event, say, client):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–µ–¥–∞—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"""
        channel_id = event.get("channel")
        thread_ts = event.get("thread_ts")
        user_id = event.get("user")

        if not channel_id or not thread_ts or not user_id:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–¥–∞
        incident = self.incident_manager.get_incident_by_thread(channel_id, thread_ts)

        if incident and incident.status == IncidentStatus.AWAITING_RESPONSE:
            logger.info(
                f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ {incident.ticket_key} –≤ —Å—Ç–∞—Ç—É—Å–µ '–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞'"
            )

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å "–Ω–∞–∑–Ω–∞—á–µ–Ω"
            incident.status = IncidentStatus.ASSIGNED
            updated = self.incident_manager.db.update_incident(incident)

            if updated:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—É
                self.incident_manager.stop_notification_task(
                    incident.ticket_key, "awaiting_response"
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
                blocks = [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": "üëÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É (–æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω)",
                        },
                    }
                ]
                blocks.extend(self.create_incident_buttons(incident))

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (—Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
                self.find_and_update_control_message(
                    channel_id, thread_ts, blocks, incident.ticket_key
                )
                self.remove_reaction(
                    channel_id=channel_id,
                    message_ts=thread_ts,
                    emoji="person_in_lotus_position",
                )

                logger.info(
                    f"‚úÖ –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident.ticket_key} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç–∞—Ç—É—Å '–Ω–∞–∑–Ω–∞—á–µ–Ω' –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"
                )

    def send_notification_sync(self, incident, notification_type: str = "default"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            logger.info(
                f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Ç–∏–ø={notification_type}, —Å—Ç–∞—Ç—É—Å={incident.status}, —Ç–∏–∫–µ—Ç={incident.ticket_key}"
            )
            duty_user_id = self.get_duty_manager()
            if (
                notification_type == "default"
                and incident.status == IncidentStatus.CREATED
            ):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥–µ–∂—É—Ä–Ω–æ–≥–æ
                message = f"<@{duty_user_id}> –ò–Ω—Ü–∏–¥–µ–Ω—Ç {incident.ticket_key} –æ–∂–∏–¥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è!"
                self.slack_client.chat_postMessage(
                    channel=incident.channel_id,
                    thread_ts=incident.thread_ts,
                    text=message,
                )
                logger.info(
                    f"üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ {incident.ticket_key} (CREATED) - –ø–∏–Ω–≥ –¥–µ–∂—É—Ä–Ω–æ–≥–æ {duty_user_id}"
                )
            elif (
                notification_type == "awaiting_response"
                and incident.status == IncidentStatus.AWAITING_RESPONSE
            ):
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
                message = f"<@{incident.author_id}> –û–∂–∏–¥–∞–µ–º –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É {incident.ticket_key}"
                self.slack_client.chat_postMessage(
                    channel=incident.channel_id,
                    thread_ts=incident.thread_ts,
                    text=message,
                )
                logger.info(
                    f"üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ {incident.ticket_key} (AWAITING_RESPONSE) - –ø–∏–Ω–≥ –∞–≤—Ç–æ—Ä–∞"
                )
            else:
                logger.warning(
                    f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–∏–ø={notification_type}, —Å—Ç–∞—Ç—É—Å={incident.status}"
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
