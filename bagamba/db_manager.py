#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –æ—á–∏—â–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import argparse
from datetime import datetime
from database import Database, IncidentStatus


async def show_incidents(db: Database, status_filter: str = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤"""
    if status_filter:
        try:
            status = IncidentStatus(status_filter)
            incidents = await db.get_incidents_by_status(status)
        except ValueError:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status_filter}")
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: {[s.value for s in IncidentStatus]}")
            return
    else:
        incidents = await db.get_all_incidents()

    if not incidents:
        print("üìã –ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {len(incidents)}")
    print("-" * 80)

    for incident in incidents:
        print(f"üé´ –¢–∏–∫–µ—Ç: {incident.ticket_key}")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {incident.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {incident.status.value}")
        print(f"üë§ –ê–≤—Ç–æ—Ä: {incident.author_id}")
        if incident.assigned_to:
            print(f"üë®‚Äçüíº –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {incident.assigned_to}")
        print(f"üí¨ –ö–∞–Ω–∞–ª: {incident.channel_id}")
        print(f"üßµ –¢—Ä–µ–¥: {incident.thread_ts}")
        if incident.last_notification:
            print(
                f"üîî –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {incident.last_notification.strftime('%Y-%m-%d %H:%M:%S')}"
            )
        print("-" * 80)


async def show_stats(db: Database):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º"""
    all_incidents = await db.get_all_incidents()
    active_incidents = await db.get_active_incidents()

    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–¶–ò–î–ï–ù–¢–û–í")
    print("=" * 40)
    print(f"üìã –í—Å–µ–≥–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {len(all_incidents)}")
    print(f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {len(active_incidents)}")
    print()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_counts = {}
    for incident in all_incidents:
        status = incident.status.value
        status_counts[status] = status_counts.get(status, 0) + 1

    print("üìä –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
    for status, count in status_counts.items():
        print(f"  {status}: {count}")
    print()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
    if all_incidents:
        today = datetime.now().date()
        today_count = sum(1 for i in all_incidents if i.created_at.date() == today)
        print(f"üìÖ –°–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {today_count}")


async def cleanup_old_incidents(db: Database, days: int):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã"""
    all_incidents = await db.get_all_incidents()
    cutoff_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    cutoff_date = cutoff_date.replace(day=cutoff_date.day - days)

    old_closed = [
        incident
        for incident in all_incidents
        if incident.status in [IncidentStatus.CLOSED, IncidentStatus.FROZEN]
        and incident.created_at < cutoff_date
    ]

    if not old_closed:
        print("üßπ –°—Ç–∞—Ä—ã–µ –∑–∞–∫—Ä—ã—Ç—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"üßπ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤: {len(old_closed)}")
    print("–£–¥–∞–ª–µ–Ω–∏–µ:")

    for incident in old_closed:
        print(f"  üóëÔ∏è {incident.ticket_key} ({incident.created_at.strftime('%Y-%m-%d')})")
        await db.delete_incident(incident.ticket_key)

    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(old_closed)} –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")


async def main():
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
    parser.add_argument("--db", default="incidents.db", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")

    # –ö–æ–º–∞–Ω–¥–∞ show
    show_parser = subparsers.add_parser("show", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã")
    show_parser.add_argument("--status", help="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É")

    # –ö–æ–º–∞–Ω–¥–∞ stats
    subparsers.add_parser("stats", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

    # –ö–æ–º–∞–Ω–¥–∞ cleanup
    cleanup_parser = subparsers.add_parser("cleanup", help="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã")
    cleanup_parser.add_argument(
        "--days", type=int, default=30, help="–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π"
    )

    # –ö–æ–º–∞–Ω–¥–∞ init
    subparsers.add_parser("init", help="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return

    db = Database(args.db)

    if args.command == "init":
        await db.init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    elif args.command == "show":
        await show_incidents(db, args.status)

    elif args.command == "stats":
        await show_stats(db)

    elif args.command == "cleanup":
        await cleanup_old_incidents(db, args.days)


if __name__ == "__main__":
    asyncio.run(main())
