import asyncio
import json
import logging
from datetime import datetime
from typing import Optional, Callable
import redis
from config import Config

logger = logging.getLogger(__name__)


class NotificationManager:
    def __init__(self):
        self.redis = None
        self.notification_callback: Optional[Callable] = None

    async def init(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        try:
            self.redis = redis.from_url(Config.REDIS_URL, db=Config.REDIS_DB)
            self.redis.ping()
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            raise

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        if self.redis:
            self.redis.close()
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –∑–∞–∫—Ä—ã—Ç–æ")

    def set_notification_callback(self, callback: Callable):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.notification_callback = callback

    async def schedule_notification(
        self,
        ticket_key: str,
        incident_data: dict,
        interval_minutes: int,
        notification_type: str = "default",
    ):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Redis"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_key = f"notification:{ticket_key}:{notification_type}"

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_data = {
                "ticket_key": ticket_key,
                "incident_data": incident_data,
                "notification_type": notification_type,
                "scheduled_at": datetime.now().isoformat(),
                "interval_minutes": interval_minutes,
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            self.redis.setex(
                notification_key,
                interval_minutes * 60,  # TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                json.dumps(notification_data),
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.redis.sadd("active_notifications", notification_key)

            logger.info(
                f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {ticket_key} —á–µ—Ä–µ–∑ {interval_minutes} –º–∏–Ω—É—Ç"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {ticket_key}: {e}")

    async def cancel_notification(
        self, ticket_key: str, notification_type: str = "default"
    ):
        """–û—Ç–º–µ–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            notification_key = f"notification:{ticket_key}:{notification_type}"

            # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.redis.delete(notification_key)
            self.redis.srem("active_notifications", notification_key)

            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {ticket_key}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {ticket_key}: {e}")

    async def cancel_all_notifications(self, ticket_key: str):
        """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–∫–µ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–∏–∫–µ—Ç–∞
            pattern = f"notification:{ticket_key}:*"
            keys = self.redis.keys(pattern)

            if keys:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                self.redis.delete(*keys)
                self.redis.srem("active_notifications", *keys)

                logger.info(f"–û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {ticket_key}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {ticket_key}: {e}")

    async def check_expired_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            active_notifications = self.redis.smembers("active_notifications")
            logger.debug(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(active_notifications)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

            for notification_key in active_notifications:
                notification_key = notification_key.decode("utf-8")
                logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_key}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if not self.redis.exists(notification_key):
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ, —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    self.redis.srem("active_notifications", notification_key)

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –∫–ª—é—á–∞
                    parts = notification_key.split(":")
                    if len(parts) >= 3:
                        ticket_key = parts[1]
                        notification_type = parts[2]

                        logger.info(
                            f"‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è {ticket_key} (—Ç–∏–ø: {notification_type})"
                        )

                        # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        if self.notification_callback:
                            await self.notification_callback(
                                ticket_key, notification_type
                            )

                        logger.info(
                            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–µ–∫—à–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {ticket_key}"
                        )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    async def start_notification_loop(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

        while True:
            try:
                await self.check_expired_notifications()
                logger.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ

    async def get_active_notifications(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            active_notifications = self.redis.smembers("active_notifications")
            return [key.decode("utf-8") for key in active_notifications]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return []

    async def get_notification_data(self, notification_key: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            data = self.redis.get(notification_key)
            if data:
                return json.loads(data.decode("utf-8"))
            return None
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_key}: {e}"
            )
            return None
